# Generated by Django 5.2.4 on 2025-09-15 14:30

import cloudinary.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import planpals.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('phone_number', models.CharField(blank=True, help_text='Phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must have the format: '+999999999'. Maximum 15 numbers.", regex='^\\+?1?\\d{9,15}$')])),
                ('avatar', cloudinary.models.CloudinaryField(blank=True, help_text='User avatar', max_length=255, null=True, verbose_name='image')),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth", null=True)),
                ('bio', models.TextField(blank=True, help_text='Introduction (maximum 500 characters)', max_length=500)),
                ('is_online', models.BooleanField(db_index=True, default=False, help_text="User's online status")),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now, help_text="User's last seen time")),
                ('fcm_token', models.CharField(blank=True, help_text='Firebase Cloud Messaging token', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'planpal_users',
            },
            managers=[
                ('objects', planpals.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('conversation_type', models.CharField(choices=[('direct', 'Chat cá nhân'), ('group', 'Chat nhóm')], db_index=True, help_text='Loại cuộc trò chuyện', max_length=10)),
                ('name', models.CharField(blank=True, help_text='Coversation name', max_length=200)),
                ('avatar', cloudinary.models.CloudinaryField(blank=True, help_text='Conversation avatar', max_length=255, null=True, verbose_name='image')),
                ('last_message_at', models.DateTimeField(blank=True, db_index=True, help_text='Timestamp of the last message in the conversation', null=True)),
                ('user_a', models.ForeignKey(blank=True, help_text='First participant in direct conversation (smaller UUID)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='direct_conversations_as_a', to=settings.AUTH_USER_MODEL)),
                ('user_b', models.ForeignKey(blank=True, help_text='Second participant in direct conversation (larger UUID)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='direct_conversations_as_b', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'planpal_conversations',
            },
        ),
        migrations.CreateModel(
            name='ChatMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('message_type', models.CharField(choices=[('text', 'Văn bản'), ('image', 'Hình ảnh'), ('file', 'File đính kèm'), ('location', 'Vị trí'), ('system', 'Thông báo hệ thống')], db_index=True, default='text', help_text='Message type', max_length=20)),
                ('content', models.TextField(help_text='Message content')),
                ('attachment', cloudinary.models.CloudinaryField(blank=True, help_text='Attachment file (image, document, etc.)', max_length=255, null=True, verbose_name='auto')),
                ('attachment_name', models.CharField(blank=True, help_text='Original file name', max_length=255)),
                ('attachment_size', models.PositiveIntegerField(blank=True, help_text='File size (bytes)', null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Latitude of location', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Longitude of location', max_digits=9, null=True)),
                ('location_name', models.CharField(blank=True, help_text='Location name', max_length=200)),
                ('is_edited', models.BooleanField(default=False, help_text='Message has been edited')),
                ('is_deleted', models.BooleanField(db_index=True, default=False, help_text='Message has been deleted (soft delete)')),
                ('reply_to', models.ForeignKey(blank=True, help_text='Reply to message', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='planpals.chatmessage')),
                ('sender', models.ForeignKey(blank=True, help_text='Sender', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
                ('conversation', models.ForeignKey(blank=True, help_text='The conversation contains this message', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='planpals.conversation')),
            ],
            options={
                'db_table': 'planpal_chat_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('status', models.CharField(choices=[('pending', 'Đang chờ'), ('accepted', 'Đã chấp nhận'), ('rejected', 'Đã từ chối'), ('blocked', 'Đã chặn')], db_index=True, default='pending', help_text='Current status of friendship', max_length=20)),
                ('initiator', models.ForeignKey(help_text='User who initiated this friendship request', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='initiated_friendships', to=settings.AUTH_USER_MODEL)),
                ('user_a', models.ForeignKey(help_text='User with smaller UUID (canonical ordering)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='friendships_as_a', to=settings.AUTH_USER_MODEL)),
                ('user_b', models.ForeignKey(help_text='User with larger UUID (canonical ordering)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='friendships_as_b', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'planpal_friendships',
            },
        ),
        migrations.CreateModel(
            name='FriendshipRejection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('friendship', models.ForeignKey(help_text='Friendship record being rejected', on_delete=django.db.models.deletion.CASCADE, related_name='rejections', to='planpals.friendship')),
                ('rejected_by', models.ForeignKey(help_text='User who performed the rejection', on_delete=django.db.models.deletion.CASCADE, related_name='performed_rejections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'planpal_friendship_rejections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('name', models.CharField(help_text='Group name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Group description')),
                ('avatar', cloudinary.models.CloudinaryField(blank=True, help_text='Group avatar', max_length=255, null=True, verbose_name='image')),
                ('cover_image', cloudinary.models.CloudinaryField(blank=True, help_text='Group cover image', max_length=255, null=True, verbose_name='image')),
                ('admin', models.ForeignKey(help_text='Group admin', on_delete=django.db.models.deletion.CASCADE, related_name='administered_groups', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'planpal_groups',
            },
        ),
        migrations.AddField(
            model_name='conversation',
            name='group',
            field=models.OneToOneField(blank=True, help_text='Group (only for group conversations)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conversation', to='planpals.group'),
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('role', models.CharField(choices=[('admin', 'Quản trị viên'), ('member', 'Thành viên')], db_index=True, default='member', help_text='Role', max_length=20)),
                ('group', models.ForeignKey(help_text='Group', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='planpals.group')),
                ('user', models.ForeignKey(help_text='Member user', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'planpal_group_memberships',
            },
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(help_text='Group members', related_name='joined_groups', through='planpals.GroupMembership', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MessageReadStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('read_at', models.DateTimeField(auto_now_add=True, help_text='Time when the message was read')),
                ('message', models.ForeignKey(help_text='Message that has been read', on_delete=django.db.models.deletion.CASCADE, related_name='read_statuses', to='planpals.chatmessage')),
                ('user', models.ForeignKey(help_text='User who has read the message', on_delete=django.db.models.deletion.CASCADE, related_name='message_read_statuses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'planpal_message_read_statuses',
                'ordering': ['read_at'],
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('title', models.CharField(help_text='Title of the plan', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the plan')),
                ('plan_type', models.CharField(choices=[('personal', 'Cá nhân'), ('group', 'Nhóm')], db_index=True, default='personal', help_text='Type of plan: personal or group', max_length=20)),
                ('start_date', models.DateTimeField(help_text='Start date of the trip')),
                ('end_date', models.DateTimeField(help_text='End date of the trip')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Is the plan public?')),
                ('status', models.CharField(choices=[('upcoming', 'Sắp bắt đầu'), ('ongoing', 'Đang diễn ra'), ('completed', 'Đã hoàn thành'), ('cancelled', 'Đã hủy')], db_index=True, default='upcoming', help_text='Current status of the plan', max_length=20)),
                ('scheduled_start_task_id', models.CharField(blank=True, help_text='Celery task id scheduled to start this plan', max_length=255, null=True)),
                ('scheduled_end_task_id', models.CharField(blank=True, help_text='Celery task id scheduled to complete this plan', max_length=255, null=True)),
                ('creator', models.ForeignKey(help_text='Creator/owner of the plan', on_delete=django.db.models.deletion.CASCADE, related_name='created_plans', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(blank=True, help_text='Group associated with the plan (null for personal plans)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plans', to='planpals.group')),
            ],
            options={
                'db_table': 'planpal_plans',
            },
        ),
        migrations.CreateModel(
            name='PlanActivity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier', primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Creation time')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Last updated time')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Active status')),
                ('title', models.CharField(help_text='Activity name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Activity description')),
                ('activity_type', models.CharField(choices=[('eating', 'Ăn uống'), ('resting', 'Nghỉ ngơi'), ('moving', 'Di chuyển'), ('sightseeing', 'Tham quan'), ('shopping', 'Mua sắm'), ('entertainment', 'Giải trí'), ('event', 'Sự kiện'), ('sport', 'Thể thao'), ('study', 'Học tập'), ('work', 'Công việc'), ('other', 'Khác')], db_index=True, default='other', help_text='Activity type', max_length=20)),
                ('start_time', models.DateTimeField(help_text='Start time of the activity')),
                ('end_time', models.DateTimeField(help_text='End time of the activity')),
                ('location_name', models.CharField(blank=True, help_text='Name of the location', max_length=200)),
                ('location_address', models.TextField(blank=True, help_text='Detailed address')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, help_text='Latitude', max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, help_text='Longitude', max_digits=9, null=True)),
                ('goong_place_id', models.CharField(blank=True, help_text='Goong Map API place ID', max_length=200)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, help_text='Estimated cost (VND)', max_digits=10, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of activity in the day')),
                ('is_completed', models.BooleanField(default=False, help_text='Has the activity been completed?')),
                ('version', models.PositiveIntegerField(default=1, help_text='Version cho conflict detection')),
                ('plan', models.ForeignKey(help_text='Plan of this activity', on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='planpals.plan')),
            ],
            options={
                'db_table': 'planpal_plan_activities',
                'ordering': ['start_time'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='planpal_use_created_eab08a_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['updated_at'], name='planpal_use_updated_cdbae8_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['first_name', 'last_name'], name='planpal_use_first_n_9c85f1_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_online', 'last_seen'], name='planpal_use_is_onli_6c0997_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['created_at'], name='planpal_cha_created_88ae39_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['updated_at'], name='planpal_cha_updated_18a695_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['conversation', 'created_at'], name='planpal_cha_convers_f39cee_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['conversation', 'is_deleted', 'created_at'], name='planpal_cha_convers_35bfba_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['sender', 'created_at'], name='planpal_cha_sender__f5ae12_idx'),
        ),
        migrations.AddIndex(
            model_name='chatmessage',
            index=models.Index(fields=['message_type', 'created_at'], name='planpal_cha_message_512278_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['created_at'], name='planpal_fri_created_6d53be_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['updated_at'], name='planpal_fri_updated_de74b8_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['user_a', 'status'], name='planpal_fri_user_a__7a8d9d_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['user_b', 'status'], name='planpal_fri_user_b__44787b_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['initiator', 'status'], name='planpal_fri_initiat_fea892_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['status', 'created_at'], name='planpal_fri_status_bad874_idx'),
        ),
        migrations.AddIndex(
            model_name='friendship',
            index=models.Index(fields=['user_a', 'user_b', 'status'], name='planpal_fri_user_a__6bc07b_idx'),
        ),
        migrations.AddConstraint(
            model_name='friendship',
            constraint=models.UniqueConstraint(fields=('user_a', 'user_b'), name='unique_canonical_friendship'),
        ),
        migrations.AddConstraint(
            model_name='friendship',
            constraint=models.CheckConstraint(condition=models.Q(('user_a__isnull', False), ('user_b__isnull', False)), name='both_users_must_exist'),
        ),
        migrations.AddConstraint(
            model_name='friendship',
            constraint=models.CheckConstraint(condition=models.Q(('user_a', models.F('user_b')), _negated=True), name='no_self_friendship'),
        ),
        migrations.AddIndex(
            model_name='friendshiprejection',
            index=models.Index(fields=['created_at'], name='planpal_fri_created_66fc03_idx'),
        ),
        migrations.AddIndex(
            model_name='friendshiprejection',
            index=models.Index(fields=['updated_at'], name='planpal_fri_updated_559f5b_idx'),
        ),
        migrations.AddIndex(
            model_name='friendshiprejection',
            index=models.Index(fields=['friendship', 'created_at'], name='planpal_fri_friends_dec9f1_idx'),
        ),
        migrations.AddIndex(
            model_name='friendshiprejection',
            index=models.Index(fields=['rejected_by', 'created_at'], name='planpal_fri_rejecte_bf07c4_idx'),
        ),
        migrations.AddIndex(
            model_name='friendshiprejection',
            index=models.Index(fields=['friendship', 'rejected_by'], name='planpal_fri_friends_1f6b7f_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['created_at'], name='planpal_con_created_119e9f_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['updated_at'], name='planpal_con_updated_767082_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['conversation_type', 'is_active'], name='planpal_con_convers_405e96_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['group', 'is_active'], name='planpal_con_group_i_4d889a_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['user_a', 'user_b'], name='planpal_con_user_a__8fa840_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['last_message_at'], name='planpal_con_last_me_07cda2_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['is_active', 'last_message_at'], name='planpal_con_is_acti_5f5fb7_idx'),
        ),
        migrations.AddConstraint(
            model_name='conversation',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('conversation_type', 'group'), ('group__isnull', False)), models.Q(('conversation_type', 'group'), _negated=True), _connector='OR'), name='group_conv_must_have_group'),
        ),
        migrations.AddConstraint(
            model_name='conversation',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('conversation_type', 'direct'), ('user_a__isnull', False), ('user_b__isnull', False)), models.Q(('conversation_type', 'direct'), _negated=True), _connector='OR'), name='direct_conv_must_have_users'),
        ),
        migrations.AddConstraint(
            model_name='conversation',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('conversation_type', 'group'), ('user_a__isnull', True), ('user_b__isnull', True)), models.Q(('conversation_type', 'direct'), ('group__isnull', True)), _connector='OR'), name='exclusive_conversation_types'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['created_at'], name='planpal_gro_created_0758e3_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['updated_at'], name='planpal_gro_updated_937700_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['group', 'role'], name='planpal_gro_group_i_03f700_idx'),
        ),
        migrations.AddIndex(
            model_name='groupmembership',
            index=models.Index(fields=['user', 'role'], name='planpal_gro_user_id_24aafd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('user', 'group')},
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['created_at'], name='planpal_gro_created_6a41a9_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['updated_at'], name='planpal_gro_updated_a90080_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['admin', 'is_active'], name='planpal_gro_admin_i_65e190_idx'),
        ),
        migrations.AddIndex(
            model_name='group',
            index=models.Index(fields=['is_active', 'created_at'], name='planpal_gro_is_acti_dfd2e9_idx'),
        ),
        migrations.AddIndex(
            model_name='messagereadstatus',
            index=models.Index(fields=['created_at'], name='planpal_mes_created_d69eee_idx'),
        ),
        migrations.AddIndex(
            model_name='messagereadstatus',
            index=models.Index(fields=['updated_at'], name='planpal_mes_updated_b152ff_idx'),
        ),
        migrations.AddIndex(
            model_name='messagereadstatus',
            index=models.Index(fields=['message', 'read_at'], name='planpal_mes_message_3f86c5_idx'),
        ),
        migrations.AddIndex(
            model_name='messagereadstatus',
            index=models.Index(fields=['user', 'read_at'], name='planpal_mes_user_id_64509f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='messagereadstatus',
            unique_together={('message', 'user')},
        ),
        migrations.AddIndex(
            model_name='plan',
            index=models.Index(fields=['created_at'], name='planpal_pla_created_e551ac_idx'),
        ),
        migrations.AddIndex(
            model_name='plan',
            index=models.Index(fields=['updated_at'], name='planpal_pla_updated_1fc8db_idx'),
        ),
        migrations.AddIndex(
            model_name='plan',
            index=models.Index(fields=['creator', 'plan_type', 'status'], name='planpal_pla_creator_b86e43_idx'),
        ),
        migrations.AddIndex(
            model_name='plan',
            index=models.Index(fields=['group', 'status'], name='planpal_pla_group_i_52512a_idx'),
        ),
        migrations.AddIndex(
            model_name='plan',
            index=models.Index(fields=['start_date', 'end_date'], name='planpal_pla_start_d_2cda81_idx'),
        ),
        migrations.AddIndex(
            model_name='plan',
            index=models.Index(fields=['is_public', 'plan_type', 'status'], name='planpal_pla_is_publ_77047f_idx'),
        ),
        migrations.AddIndex(
            model_name='planactivity',
            index=models.Index(fields=['created_at'], name='planpal_pla_created_022eb6_idx'),
        ),
        migrations.AddIndex(
            model_name='planactivity',
            index=models.Index(fields=['updated_at'], name='planpal_pla_updated_be8f88_idx'),
        ),
        migrations.AddIndex(
            model_name='planactivity',
            index=models.Index(fields=['plan', 'start_time'], name='planpal_pla_plan_id_b48678_idx'),
        ),
        migrations.AddIndex(
            model_name='planactivity',
            index=models.Index(fields=['activity_type', 'start_time'], name='planpal_pla_activit_1238b9_idx'),
        ),
        migrations.AddIndex(
            model_name='planactivity',
            index=models.Index(fields=['plan', 'start_time', 'end_time'], name='planpal_pla_plan_id_836749_idx'),
        ),
    ]
