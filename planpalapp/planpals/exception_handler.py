"""
Custom exception handler for DRF to provide user-friendly error messages
"""
from rest_framework.views import exception_handler
from rest_framework.response import Response
from rest_framework import status
from django.core.exceptions import ValidationError as DjangoValidationError, PermissionDenied as DjangoPermissionDenied
from .exceptions import PlanPalException
import logging

logger = logging.getLogger(__name__)


def custom_exception_handler(exc, context):
    """
    Custom exception handler that returns user-friendly error messages
    """
    # Call REST framework's default exception handler first
    response = exception_handler(exc, context)
    
    # Handle PlanPal custom exceptions
    if isinstance(exc, PlanPalException):
        return Response({
            'error': str(exc.detail),
            'error_code': exc.default_code,
            'status_code': exc.status_code
        }, status=exc.status_code)
    
    # Handle Django ValidationError
    if isinstance(exc, DjangoValidationError):
        # Chuyển đổi ValidationError message sang tiếng Việt
        error_message = _translate_validation_error(exc)
        
        return Response({
            'error': error_message,
            'error_code': 'validation_error',
            'status_code': 400
        }, status=status.HTTP_400_BAD_REQUEST)
    
    # Handle Django PermissionDenied
    if isinstance(exc, DjangoPermissionDenied):
        return Response({
            'error': str(exc) if str(exc) else 'Bạn không có quyền thực hiện hành động này.',
            'error_code': 'permission_denied',
            'status_code': 403
        }, status=status.HTTP_403_FORBIDDEN)
    
    # If response was generated by DRF's handler
    if response is not None:
        # Customize the error response format
        error_data = response.data
        
        # Extract meaningful error message
        if isinstance(error_data, dict):
            if 'detail' in error_data:
                error_message = error_data['detail']
            elif 'non_field_errors' in error_data:
                error_message = error_data['non_field_errors'][0] if isinstance(error_data['non_field_errors'], list) else error_data['non_field_errors']
            else:
                # Field-specific errors
                error_messages = []
                for field, messages in error_data.items():
                    if isinstance(messages, list):
                        for msg in messages:
                            error_messages.append(f"{field}: {msg}")
                    else:
                        error_messages.append(f"{field}: {messages}")
                error_message = '; '.join(error_messages) if error_messages else 'Đã xảy ra lỗi.'
        elif isinstance(error_data, list):
            error_message = error_data[0] if error_data else 'Đã xảy ra lỗi.'
        else:
            error_message = str(error_data)
        
        # Return formatted error response
        return Response({
            'error': error_message,
            'error_code': 'error',
            'status_code': response.status_code
        }, status=response.status_code)
    
    # For unexpected exceptions, log them and return generic error
    logger.error(f"Unexpected exception: {exc}", exc_info=True)
    
    return Response({
        'error': 'Đã xảy ra lỗi không mong đợi. Vui lòng thử lại sau.',
        'error_code': 'internal_error',
        'status_code': 500
    }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


def _translate_validation_error(exc):
    """
    Chuyển đổi Django ValidationError messages sang tiếng Việt
    """
    # Dictionary ánh xạ các message thường gặp
    translations = {
        'Activity cannot end after plan end date': 'Thời gian kết thúc hoạt động không được vượt quá ngày kết thúc của kế hoạch.',
        'Activity cannot start before plan start date': 'Thời gian bắt đầu hoạt động không được sớm hơn ngày bắt đầu của kế hoạch.',
        'Activity duration must not exceed 24 hours': 'Thời lượng hoạt động không được vượt quá 24 giờ.',
        'End time must be after start time': 'Thời gian kết thúc phải sau thời gian bắt đầu.',
        'End date must be after start date': 'Ngày kết thúc phải sau ngày bắt đầu.',
        'Latitude must be between -90 and 90': 'Vĩ độ phải nằm trong khoảng -90 đến 90.',
        'Longitude must be between -180 and 180': 'Kinh độ phải nằm trong khoảng -180 đến 180.',
        'Estimated cost must be non-negative': 'Chi phí ước tính không được âm.',
        'Cannot create friendship with yourself': 'Không thể kết bạn với chính mình.',
        'Group must have at least one admin': 'Nhóm phải có ít nhất một quản trị viên.',
        'Personal plan cannot have a group': 'Kế hoạch cá nhân không thể có nhóm.',
        'Group plan must have a group': 'Kế hoạch nhóm phải có nhóm.',
        'You must be a member of the group to create a plan': 'Bạn phải là thành viên của nhóm để tạo kế hoạch.',
        'Cannot update a plan that is already completed': 'Không thể cập nhật kế hoạch đã hoàn thành.',
        'Permission denied to edit this plan': 'Bạn không có quyền chỉnh sửa kế hoạch này.',
        'Activity time conflicts with existing activities': 'Hoạt động trùng thời gian với hoạt động khác.',
    }
    
    # Lấy message từ exception
    if hasattr(exc, 'message'):
        error_message = exc.message
    elif hasattr(exc, 'message_dict'):
        # Multiple field errors
        errors = []
        for field, messages in exc.message_dict.items():
            for message in messages:
                translated = translations.get(message, message)
                errors.append(f"{field}: {translated}")
        return '; '.join(errors)
    else:
        error_message = str(exc)
    
    # Chuyển đổi sang tiếng Việt nếu có trong dictionary
    return translations.get(error_message, error_message)
